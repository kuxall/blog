{
  
    
        "post0": {
            "title": "Get Started",
            "content": "[Enter Post Title Here] . GETTING STARTED WITH AI/ML . Overview . If you ever wanted to dive into AI/ML, here I will share my ideas on getting started with Machine Learning and Artificial Intelligence. I m going to share what language you should learn, what kind of math background you need, and the process you should be following in terms of what should you learn first, and when you should move from there to get better and better with machine learning at a beginner level. . There are a lot of languages specially for Machine Learning, like R, Python, JavaScript, and Java, but I recommend Python as it is easier to start with. Another reason is that it supports a lot of modules for Artificial Intelligence and Machine Learning. . Next thing is about Mathematics. It scares a lot as everyone is not as good at math. You do not need to be good at math but should know the basic of it. Yeah, understanding of math is a plus. As you should be aware that math is the combination of complicated mathematical algorithmic problems developed by experts. . Let’s discussed about the Steps involved in Machine Learning: . Analyze the problem: | . Identify the area from where you want to solve the problem. Is it worth that the problem needs to be dealt or to provide the solutions? . Data Collection: | . It is the most important to collect the reliable data so that your Machine Learning model can find the correct patterns and eventually helps to determine how accurate our model will be. The outcomes will be irrelevant if we provide incorrect data. . . Data Cleaning: | . If the collected data is not as we desired than we need to perform this operations. Cleaning is the process of removing the unwanted data, filling up the missing values, also sometimes we need to restructure the datasets. . . Choosing a Model: | . A ML model determines the output after running a ML algorithm on collected data. We need to choose a model that should be relevant to the task that we want to perform. Also don’t forget to check if your model is suited for numerical or categorical data and choose it accordingly. . . Training the model: | . It is the most important steps in Machine Learning. In training we pass the prepared and cleaned data in ML model to find the patterns and make prediction on the data. . . Evaluate the Model: | . After training the model, we need to see how the model performs. This is done by testing the model on the previously unseen data. If evaluation is done on the training data, we will not get the accurate measure. If evaluation is done on the testing data, we get the accurate measure of how our model performs. . . . Making Predictions: | . We can use our model on unseen data to make predictions more accurate. . Conclusions . In this tutorial, we learnt about how to get start with AI and ML and the steps that are required for the machine learning. .",
            "url": "https://kuxall.github.io/blog/2022/08/18/Get-started.html",
            "relUrl": "/2022/08/18/Get-started.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "TF-IDF",
            "content": "What is TF-IDF? . TF-IDF (term frequency-inverse document frequency) is a statistical measure that evaluates how relevant a word is to a document in a collection of documents. . This is done by multiplying two metrics:how many times a word appears in a document, and the inverse document frequency of the word across a set of documents. It has many uses, most importantly in automated text analysis, and is very useful for scoring words in machine learning algorithms for Natural Language Processing (NLP). . TF-IDF was invented for document search and information retrieval. It works by increasing proportionally to the number of times a word appears in a document, but is offset by the number of documents that contain the word. So, words that are common in every document, such as this, what, and if, rank low even though they may appear many times, since they don’t mean much to that document in particular. . How is TF-IDF calculated? . The Term Frequency of a word in a document. There are several ways of calculating this frequency, with the simplest being a raw count of instances a word appears in a document. Then, there are ways to adjust the frequency, by length of a document, or by the raw frequency of the most frequent word in a document. . The Inverse Document Frequency of the word across a set of documents. This means, how common or rare a word is in the entire document set. The closer it is to 0, the more common a word is. This metric can be calculated by taking the total number of documents, dividing it by the number of documents that contain a word, and calculating the logarithm. . So, if the word is very common and appears in many documents, this number will approach 0. Otherwise, it will approach 1. . Multiplying these two numbers results in the TF-IDF score of a word in a document. The higher the score, the more relevant that word is in that particular document. . Now, Let&#39;s go to the practical implementation of TF-IDF . toc: true | badges: true | comments: true | categories: [ nlp, tfidf, scikit-learn ] | . Let&#39;s See Examples . Importing Modules . Here we import all the necessary modules that are required later. . import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import matplotlib.pyplot as plt import seaborn as sns from sklearn.feature_extraction.text import CountVectorizer from sklearn.multiclass import OneVsRestClassifier from sklearn.preprocessing import OneHotEncoder from sklearn.pipeline import Pipeline from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.feature_selection import chi2 from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfTransformer from sklearn.svm import LinearSVC from sklearn.model_selection import cross_val_score from sklearn.metrics import confusion_matrix from sklearn.metrics import classification_report . Warnings . This will hide all the warnings in the output screen. . import warnings warnings.filterwarnings(&quot;ignore&quot;, category=UserWarning) warnings.filterwarnings(&quot;ignore&quot;, category=FutureWarning) . Generate requirements.txt file . This will generate all the requirements dependencies from the import modules. . !pipreqs ./ --ignore .venv --force . /bin/bash: pipreqs: command not found . Mounting Google Drive . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(&#34;/content/drive&#34;, force_remount=True). . Fetching the Data . df = pd.read_excel(&quot;/content/drive/MyDrive/Digital Data.xlsx&quot;) . df[&quot;TitleandDesc&quot;] = df[&quot;title&quot;] + df[&quot;Job_Description&quot;] . Manipulation of Data . . df[&quot;TitleandDesc&quot;] . 0 Commercial Painters needed ASAP at our Dallas/... 1 Nightclub Jobs -Model/Servers- Cash Daily,Look... 2 Nightclub Jobs -Model Servers- Cash Daily,* Mo... 3 PRINTING - 1st shift,CDL Class A full time loc... 4 Admin Assistant,Necesito personal de limpieza ... ... 2109 Calling all well connected engineers, develope... 2110 Software Engineer - Remote OptionalSignup on H... 2111 Senior Software Engineer for Part-time Technic... 2112 Google AppSheet Developer | $47.00 - $54.00 pe... 2113 Graphic Designer Production mgr.Sign Design is... Name: TitleandDesc, Length: 2114, dtype: object . Removing Unnecessary Data . Here, we remove the columns that are not required for the EDA. . df df.drop([&#39;Index&#39;, &#39;title&#39;,&#39;url&#39;,&#39;Posted-Date&#39;, &#39;Job_Description&#39;], axis=1, inplace=True) . . first_column = df.pop(&#39;TitleandDesc&#39;) df.insert(0, &#39;TitleandDesc&#39;, first_column) . df.shape . (2114, 2) . total = df[&#39;TitleandDesc&#39;].notnull().sum() round((total/len(df)*100),1) . 100.0 . . pd.DataFrame(df.JobType.unique()).values . array([[&#39;Jobs – Retail&#39;], [&#39;Jobs – IT&#39;], [&#39;Rent – Apartment&#39;], [&#39;Sell – House&#39;], [&#39;Banking&#39;]], dtype=object) . df[&#39;Job_Id&#39;] = df[&#39;JobType&#39;].factorize()[0] job_id_df = df[[&#39;JobType&#39;, &#39;Job_Id&#39;]].drop_duplicates() # Dictionaries for future use job_to_id = dict(job_id_df.values) id_to_job = dict(job_id_df[[&#39;Job_Id&#39;, &#39;JobType&#39;]].values) # New dataframe df . TitleandDesc JobType Job_Id . 0 Commercial Painters needed ASAP at our Dallas/... | Jobs – Retail | 0 | . 1 Nightclub Jobs -Model/Servers- Cash Daily,Look... | Jobs – Retail | 0 | . 2 Nightclub Jobs -Model Servers- Cash Daily,* Mo... | Jobs – Retail | 0 | . 3 PRINTING - 1st shift,CDL Class A full time loc... | Jobs – IT | 1 | . 4 Admin Assistant,Necesito personal de limpieza ... | Jobs – IT | 1 | . ... ... | ... | ... | . 2109 Calling all well connected engineers, develope... | Jobs – IT | 1 | . 2110 Software Engineer - Remote OptionalSignup on H... | Jobs – IT | 1 | . 2111 Senior Software Engineer for Part-time Technic... | Jobs – IT | 1 | . 2112 Google AppSheet Developer | $47.00 - $54.00 pe... | Jobs – IT | 1 | . 2113 Graphic Designer Production mgr.Sign Design is... | Jobs – IT | 1 | . 2114 rows × 3 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Check . Here, we check the position of the cells in the datasets, where the cell is empty. . np.where(pd.isnull(df)) . (array([], dtype=int64), array([], dtype=int64)) . df.isnull().sum() . TitleandDesc 0 JobType 0 Job_Id 0 dtype: int64 . Graph Plot . fig = plt.figure(figsize=(8,6)) colors = [&#39;red&#39;, &#39;orange&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;crimson&#39;] df.groupby(&#39;JobType&#39;).TitleandDesc.count().sort_values().plot.barh( ylim=0, color=colors, title= &#39;No. of Jobs in Each JobType n&#39;) plt.xlabel(&#39;Number of ocurrences&#39;, fontsize = 10); . Count . We count the total occurences of data in the datasets. . from collections import Counter Counter(df[&quot;JobType&quot;]) . Counter({&#39;Jobs – Retail&#39;: 729, &#39;Jobs – IT&#39;: 260, &#39;Rent – Apartment&#39;: 327, &#39;Sell – House&#39;: 607, &#39;Banking&#39;: 191}) . Performing TFIDF . tfidf = TfidfVectorizer(sublinear_tf=True, min_df=5, ngram_range=(1, 3), stop_words=&#39;english&#39;) # We transform each complaint into a vector features = tfidf.fit_transform(df.TitleandDesc).toarray() labels = df.Job_Id print(&quot;Each of the %d complaints is represented by %d features (TF-IDF score of unigrams and bigrams)&quot; %(features.shape)) . Each of the 2114 complaints is represented by 23401 features (TF-IDF score of unigrams and bigrams) . . . Generating Unigrams and Bigrams . N = 5 for JobType, Job_Id in sorted(job_to_id.items()): features_chi2 = chi2(features, labels == Job_Id) indices = np.argsort(features_chi2[0]) feature_names = np.array(tfidf.get_feature_names())[indices] unigrams = [v for v in feature_names if len(v.split(&#39; &#39;)) == 1] bigrams = [v for v in feature_names if len(v.split(&#39; &#39;)) == 2] trigrams = [v for v in feature_names if len(v.split(&#39; &#39;)) == 3] print(&quot; n==&gt; %s:&quot; %(JobType)) print(&quot; * Most Correlated Unigrams are: %s&quot; %(&#39;, &#39;.join(unigrams[-N:]))) print(&quot; * Most Correlated Bigrams are: %s&quot; %(&#39;, &#39;.join(bigrams[-N:]))) # print(&quot; * Most Correlated Trigrams are: %s&quot; %(&#39;, &#39;.join(trigrams[-N:]))) . ==&gt; Banking: * Most Correlated Unigrams are: accounts, quickbooks, bookkeeper, accountant, accounting * Most Correlated Bigrams are: accounts receivable, bookkeeper job, assistant job, senior accountant, accountant job ==&gt; Jobs – IT: * Most Correlated Unigrams are: developer, pathrise, engineering, engineer, software * Most Correlated Bigrams are: jobs email, best matching, matching jobs, software engineering, software engineer ==&gt; Jobs – Retail: * Most Correlated Unigrams are: pay, truck, cdl, driver, drivers * Most Correlated Bigrams are: home time, owner operators, class cdl, direct deposit, sign bonus ==&gt; Rent – Apartment: * Most Correlated Unigrams are: utilities, furnished, originator, roommates, rent * Most Correlated Bigrams are: 2022this posting, room available, room room, roommates available, room roommates ==&gt; Sell – House: * Most Correlated Unigrams are: bedroom, living, large, bedrooms, ny * Most Correlated Bigrams are: bedroom bathroom, brooklyn ny, hardwood floors, dining room, living room . X = np.array(df[&quot;TitleandDesc&quot;]) . y = np.array(df[&quot;JobType&quot;]) . pd.DataFrame(df.JobType.unique()).values . array([[&#39;Jobs – Retail&#39;], [&#39;Jobs – IT&#39;], [&#39;Rent – Apartment&#39;], [&#39;Sell – House&#39;], [&#39;Banking&#39;]], dtype=object) . Train Test Split . X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=45) . OneVsRest Classifier . One-vs-rest (OvR for short, also referred to as One-vs-All or OvA) is a heuristic method for using binary classification algorithms for multi-class classification. . It involves splitting the multi-class dataset into multiple binary classification problems. A binary classifier is then trained on each binary classification problem and predictions are made using the model that is the most confident. . Pipelining . model = Pipeline([(&#39;vectorizer&#39;, CountVectorizer()), (&#39;tfidf&#39;, TfidfTransformer()), (&#39;clf&#39;, OneVsRestClassifier(LinearSVC(class_weight=&#39;balanced&#39;)))]) #the class_weight=&quot;balanced&quot; option tries to remove the biasedness of model towards majority sample . Fitting the model . model.fit(X_train, y_train) . Pipeline(steps=[(&#39;vectorizer&#39;, CountVectorizer()), (&#39;tfidf&#39;, TfidfTransformer()), (&#39;clf&#39;, OneVsRestClassifier(estimator=LinearSVC(class_weight=&#39;balanced&#39;)))]) . Confusion Matrix . y_pred = model.predict(X_test) conf_mat = confusion_matrix(y_test, y_pred) fig, ax = plt.subplots(figsize=(6,6)) sns.heatmap(conf_mat, annot=True, cmap=&quot;Blues&quot;, fmt=&#39;d&#39;, xticklabels=job_id_df.JobType.values, yticklabels=job_id_df.JobType.values) plt.ylabel(&#39;Actual&#39;) plt.xlabel(&#39;Predicted&#39;) plt.title(&quot;CONFUSION MATRIX - LinearSVC n&quot;, size=16); . Classification report . print(&#39; t t tCLASSIFICATIION METRICS n&#39;) print(classification_report(y_test, y_pred, target_names= df[&#39;JobType&#39;].unique())) . CLASSIFICATIION METRICS precision recall f1-score support Jobs – Retail 0.91 0.85 0.88 34 Jobs – IT 0.96 0.86 0.91 51 Rent – Apartment 0.92 0.96 0.94 159 Sell – House 0.97 0.97 0.97 58 Banking 0.98 0.98 0.98 121 accuracy 0.94 423 macro avg 0.94 0.92 0.93 423 weighted avg 0.94 0.94 0.94 423 . Save the model . import pickle filename = &#39;model.md5&#39; # pickle.dump(model, open(filename, &#39;wb&#39;)) . Load The Model . loaded_model = pickle.load(open(filename, &#39;rb&#39;)) . Check Accuracy . result = loaded_model.score(X_test, y_test) print(result) . 0.9432624113475178 . model.classes_ . array([&#39;Banking&#39;, &#39;Jobs – IT&#39;, &#39;Jobs – Retail&#39;, &#39;Rent – Apartment&#39;, &#39;Sell – House&#39;], dtype=&#39;&lt;U16&#39;) . Sample Input and Testing The Model . job = input() model.predict([job])[0] . 2 rooms (1 big &amp; 1 small) available for rent located near Everett CHA. Clouds to bus route 109, 110 and 104. Utilities and Wi-Fi included. Price negotiable . &#39;Rent – Apartment&#39; . Analysis . This shows that when we test the data, it gives the desired result. . Hence, we can say that this model performs well in this set of examples. . Conclusion . We can say that, OneVsRest Classifier is best in cases of MultiClass Classification. In this way, we can use TF-IDF in the field of Information Retrieving as we did in this tutorials. .",
            "url": "https://kuxall.github.io/blog/2022/08/17/tfidf.html",
            "relUrl": "/2022/08/17/tfidf.html",
            "date": " • Aug 17, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kuxall.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kuxall.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}