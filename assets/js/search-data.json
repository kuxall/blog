{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kuxall.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Introduction",
            "content": "What is TF-IDF? . TF-IDF (term frequency-inverse document frequency) is a statistical measure that evaluates how relevant a word is to a document in a collection of documents. . This is done by multiplying two metrics:how many times a word appears in a document, and the inverse document frequency of the word across a set of documents. It has many uses, most importantly in automated text analysis, and is very useful for scoring words in machine learning algorithms for Natural Language Processing (NLP). . TF-IDF was invented for document search and information retrieval. It works by increasing proportionally to the number of times a word appears in a document, but is offset by the number of documents that contain the word. So, words that are common in every document, such as this, what, and if, rank low even though they may appear many times, since they don’t mean much to that document in particular. . How is TF-IDF calculated? . The Term Frequency of a word in a document. There are several ways of calculating this frequency, with the simplest being a raw count of instances a word appears in a document. Then, there are ways to adjust the frequency, by length of a document, or by the raw frequency of the most frequent word in a document. . The Inverse Document Frequency of the word across a set of documents. This means, how common or rare a word is in the entire document set. The closer it is to 0, the more common a word is. This metric can be calculated by taking the total number of documents, dividing it by the number of documents that contain a word, and calculating the logarithm. . So, if the word is very common and appears in many documents, this number will approach 0. Otherwise, it will approach 1. . Multiplying these two numbers results in the TF-IDF score of a word in a document. The higher the score, the more relevant that word is in that particular document. . Now, Let&#39;s go to the practical implementation of TF-IDF . toc: true | badges: true | comments: true | categories: [ nlp, tfidf, scikit-learn ] | . Let&#39;s See Examples . Importing Modules . Here we import all the necessary modules that are required later. . import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import matplotlib.pyplot as plt import seaborn as sns from sklearn.feature_extraction.text import CountVectorizer from sklearn.multiclass import OneVsRestClassifier from sklearn.preprocessing import OneHotEncoder from sklearn.pipeline import Pipeline from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.feature_selection import chi2 from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfTransformer from sklearn.svm import LinearSVC from sklearn.model_selection import cross_val_score from sklearn.metrics import confusion_matrix from sklearn.metrics import classification_report . Warnings . This will hide all the warnings in the output screen. . import warnings warnings.filterwarnings(&quot;ignore&quot;, category=UserWarning) warnings.filterwarnings(&quot;ignore&quot;, category=FutureWarning) . Generate requirements.txt file . This will generate all the requirements dependencies from the import modules. . !pipreqs ./ --ignore .venv --force . /bin/bash: pipreqs: command not found . Mounting Google Drive . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(&#34;/content/drive&#34;, force_remount=True). . Fetching the Data . df = pd.read_excel(&quot;/content/drive/MyDrive/Digital Data.xlsx&quot;) . df[&quot;TitleandDesc&quot;] = df[&quot;title&quot;] + df[&quot;Job_Description&quot;] . Manipulation of Data . . df[&quot;TitleandDesc&quot;] . 0 Commercial Painters needed ASAP at our Dallas/... 1 Nightclub Jobs -Model/Servers- Cash Daily,Look... 2 Nightclub Jobs -Model Servers- Cash Daily,* Mo... 3 PRINTING - 1st shift,CDL Class A full time loc... 4 Admin Assistant,Necesito personal de limpieza ... ... 2109 Calling all well connected engineers, develope... 2110 Software Engineer - Remote OptionalSignup on H... 2111 Senior Software Engineer for Part-time Technic... 2112 Google AppSheet Developer | $47.00 - $54.00 pe... 2113 Graphic Designer Production mgr.Sign Design is... Name: TitleandDesc, Length: 2114, dtype: object . Removing Unnecessary Data . Here, we remove the columns that are not required for the EDA. . df df.drop([&#39;Index&#39;, &#39;title&#39;,&#39;url&#39;,&#39;Posted-Date&#39;, &#39;Job_Description&#39;], axis=1, inplace=True) . . first_column = df.pop(&#39;TitleandDesc&#39;) df.insert(0, &#39;TitleandDesc&#39;, first_column) . df.shape . (2114, 2) . total = df[&#39;TitleandDesc&#39;].notnull().sum() round((total/len(df)*100),1) . 100.0 . . pd.DataFrame(df.JobType.unique()).values . array([[&#39;Jobs – Retail&#39;], [&#39;Jobs – IT&#39;], [&#39;Rent – Apartment&#39;], [&#39;Sell – House&#39;], [&#39;Banking&#39;]], dtype=object) . df[&#39;Job_Id&#39;] = df[&#39;JobType&#39;].factorize()[0] job_id_df = df[[&#39;JobType&#39;, &#39;Job_Id&#39;]].drop_duplicates() # Dictionaries for future use job_to_id = dict(job_id_df.values) id_to_job = dict(job_id_df[[&#39;Job_Id&#39;, &#39;JobType&#39;]].values) # New dataframe df . TitleandDesc JobType Job_Id . 0 Commercial Painters needed ASAP at our Dallas/... | Jobs – Retail | 0 | . 1 Nightclub Jobs -Model/Servers- Cash Daily,Look... | Jobs – Retail | 0 | . 2 Nightclub Jobs -Model Servers- Cash Daily,* Mo... | Jobs – Retail | 0 | . 3 PRINTING - 1st shift,CDL Class A full time loc... | Jobs – IT | 1 | . 4 Admin Assistant,Necesito personal de limpieza ... | Jobs – IT | 1 | . ... ... | ... | ... | . 2109 Calling all well connected engineers, develope... | Jobs – IT | 1 | . 2110 Software Engineer - Remote OptionalSignup on H... | Jobs – IT | 1 | . 2111 Senior Software Engineer for Part-time Technic... | Jobs – IT | 1 | . 2112 Google AppSheet Developer | $47.00 - $54.00 pe... | Jobs – IT | 1 | . 2113 Graphic Designer Production mgr.Sign Design is... | Jobs – IT | 1 | . 2114 rows × 3 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Check . Here, we check the position of the cells in the datasets, where the cell is empty. . np.where(pd.isnull(df)) . (array([], dtype=int64), array([], dtype=int64)) . df.isnull().sum() . TitleandDesc 0 JobType 0 Job_Id 0 dtype: int64 . Graph Plot . fig = plt.figure(figsize=(8,6)) colors = [&#39;red&#39;, &#39;orange&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;crimson&#39;] df.groupby(&#39;JobType&#39;).TitleandDesc.count().sort_values().plot.barh( ylim=0, color=colors, title= &#39;No. of Jobs in Each JobType n&#39;) plt.xlabel(&#39;Number of ocurrences&#39;, fontsize = 10); . Count . We count the total occurences of data in the datasets. . from collections import Counter Counter(df[&quot;JobType&quot;]) . Counter({&#39;Jobs – Retail&#39;: 729, &#39;Jobs – IT&#39;: 260, &#39;Rent – Apartment&#39;: 327, &#39;Sell – House&#39;: 607, &#39;Banking&#39;: 191}) . Performing TFIDF . tfidf = TfidfVectorizer(sublinear_tf=True, min_df=5, ngram_range=(1, 3), stop_words=&#39;english&#39;) # We transform each complaint into a vector features = tfidf.fit_transform(df.TitleandDesc).toarray() labels = df.Job_Id print(&quot;Each of the %d complaints is represented by %d features (TF-IDF score of unigrams and bigrams)&quot; %(features.shape)) . Each of the 2114 complaints is represented by 23401 features (TF-IDF score of unigrams and bigrams) . . . Generating Unigrams and Bigrams . N = 5 for JobType, Job_Id in sorted(job_to_id.items()): features_chi2 = chi2(features, labels == Job_Id) indices = np.argsort(features_chi2[0]) feature_names = np.array(tfidf.get_feature_names())[indices] unigrams = [v for v in feature_names if len(v.split(&#39; &#39;)) == 1] bigrams = [v for v in feature_names if len(v.split(&#39; &#39;)) == 2] trigrams = [v for v in feature_names if len(v.split(&#39; &#39;)) == 3] print(&quot; n==&gt; %s:&quot; %(JobType)) print(&quot; * Most Correlated Unigrams are: %s&quot; %(&#39;, &#39;.join(unigrams[-N:]))) print(&quot; * Most Correlated Bigrams are: %s&quot; %(&#39;, &#39;.join(bigrams[-N:]))) # print(&quot; * Most Correlated Trigrams are: %s&quot; %(&#39;, &#39;.join(trigrams[-N:]))) . ==&gt; Banking: * Most Correlated Unigrams are: accounts, quickbooks, bookkeeper, accountant, accounting * Most Correlated Bigrams are: accounts receivable, bookkeeper job, assistant job, senior accountant, accountant job ==&gt; Jobs – IT: * Most Correlated Unigrams are: developer, pathrise, engineering, engineer, software * Most Correlated Bigrams are: jobs email, best matching, matching jobs, software engineering, software engineer ==&gt; Jobs – Retail: * Most Correlated Unigrams are: pay, truck, cdl, driver, drivers * Most Correlated Bigrams are: home time, owner operators, class cdl, direct deposit, sign bonus ==&gt; Rent – Apartment: * Most Correlated Unigrams are: utilities, furnished, originator, roommates, rent * Most Correlated Bigrams are: 2022this posting, room available, room room, roommates available, room roommates ==&gt; Sell – House: * Most Correlated Unigrams are: bedroom, living, large, bedrooms, ny * Most Correlated Bigrams are: bedroom bathroom, brooklyn ny, hardwood floors, dining room, living room . X = np.array(df[&quot;TitleandDesc&quot;]) . y = np.array(df[&quot;JobType&quot;]) . pd.DataFrame(df.JobType.unique()).values . array([[&#39;Jobs – Retail&#39;], [&#39;Jobs – IT&#39;], [&#39;Rent – Apartment&#39;], [&#39;Sell – House&#39;], [&#39;Banking&#39;]], dtype=object) . Train Test Split . X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=45) . OneVsRest Classifier . One-vs-rest (OvR for short, also referred to as One-vs-All or OvA) is a heuristic method for using binary classification algorithms for multi-class classification. . It involves splitting the multi-class dataset into multiple binary classification problems. A binary classifier is then trained on each binary classification problem and predictions are made using the model that is the most confident. . Pipelining . model = Pipeline([(&#39;vectorizer&#39;, CountVectorizer()), (&#39;tfidf&#39;, TfidfTransformer()), (&#39;clf&#39;, OneVsRestClassifier(LinearSVC(class_weight=&#39;balanced&#39;)))]) #the class_weight=&quot;balanced&quot; option tries to remove the biasedness of model towards majority sample . Fitting the model . model.fit(X_train, y_train) . Pipeline(steps=[(&#39;vectorizer&#39;, CountVectorizer()), (&#39;tfidf&#39;, TfidfTransformer()), (&#39;clf&#39;, OneVsRestClassifier(estimator=LinearSVC(class_weight=&#39;balanced&#39;)))]) . Confusion Matrix . y_pred = model.predict(X_test) conf_mat = confusion_matrix(y_test, y_pred) fig, ax = plt.subplots(figsize=(6,6)) sns.heatmap(conf_mat, annot=True, cmap=&quot;Blues&quot;, fmt=&#39;d&#39;, xticklabels=job_id_df.JobType.values, yticklabels=job_id_df.JobType.values) plt.ylabel(&#39;Actual&#39;) plt.xlabel(&#39;Predicted&#39;) plt.title(&quot;CONFUSION MATRIX - LinearSVC n&quot;, size=16); . Classification report . print(&#39; t t tCLASSIFICATIION METRICS n&#39;) print(classification_report(y_test, y_pred, target_names= df[&#39;JobType&#39;].unique())) . CLASSIFICATIION METRICS precision recall f1-score support Jobs – Retail 0.91 0.85 0.88 34 Jobs – IT 0.96 0.86 0.91 51 Rent – Apartment 0.92 0.96 0.94 159 Sell – House 0.97 0.97 0.97 58 Banking 0.98 0.98 0.98 121 accuracy 0.94 423 macro avg 0.94 0.92 0.93 423 weighted avg 0.94 0.94 0.94 423 . Save the model . import pickle filename = &#39;model.md5&#39; # pickle.dump(model, open(filename, &#39;wb&#39;)) . Load The Model . loaded_model = pickle.load(open(filename, &#39;rb&#39;)) . Check Accuracy . result = loaded_model.score(X_test, y_test) print(result) . 0.9432624113475178 . model.classes_ . array([&#39;Banking&#39;, &#39;Jobs – IT&#39;, &#39;Jobs – Retail&#39;, &#39;Rent – Apartment&#39;, &#39;Sell – House&#39;], dtype=&#39;&lt;U16&#39;) . Sample Input and Testing The Model . job = input() model.predict([job])[0] . hi . &#39;Sell – House&#39; . Analysis . This shows that when we test the data, it gives the desired result. . Hence, we can say that this model performs well in this set of examples. . Conclusion . We can say that, OneVsRest Classifier is best in cases of MultiClass Classification. In this way, we can use TF-IDF in the field of Information Retrieving as we did in this tutorials. .",
            "url": "https://kuxall.github.io/blog/2020/01/28/tfidf.html",
            "relUrl": "/2020/01/28/tfidf.html",
            "date": " • Jan 28, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kuxall.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kuxall.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kuxall.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}